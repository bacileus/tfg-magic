//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\SpellCreator.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class SpellCreatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FIRESOME=1, FROZEN=2, STORMFUL=3, LIFE=4, RESISTANCE=5, SPEED=6, PROJECTILE=7, 
		AREA=8, SELF=9, INSTANT=10, IMPULSE=11, CHASE=12, FALL=13, PARENT=14, 
		DESTROY=15, RICOCHET=16, MULTIPLE=17, ADJECTIVE=18, SIGN=19, WISE=20, 
		WS=21, CONNECTOR=22;
	public const int
		RULE_spell = 0, RULE_element = 1, RULE_fire = 2, RULE_ice = 3, RULE_shock = 4, 
		RULE_effect = 5, RULE_life = 6, RULE_resistance = 7, RULE_speed = 8, RULE_shape = 9, 
		RULE_projectile = 10, RULE_area = 11, RULE_self = 12, RULE_demeanour = 13, 
		RULE_instant = 14, RULE_impulse = 15, RULE_chase = 16, RULE_fall = 17, 
		RULE_parent = 18, RULE_impact = 19, RULE_destroy = 20, RULE_ricochet = 21, 
		RULE_multiple = 22, RULE_connector = 23;
	public static readonly string[] ruleNames = {
		"spell", "element", "fire", "ice", "shock", "effect", "life", "resistance", 
		"speed", "shape", "projectile", "area", "self", "demeanour", "instant", 
		"impulse", "chase", "fall", "parent", "impact", "destroy", "ricochet", 
		"multiple", "connector"
	};

	private static readonly string[] _LiteralNames = {
		null, "'FIRESOME'", "'FROZEN'", "'STORMFUL'", "'LIFE'", "'RESISTANCE'", 
		"'SPEED'", "'PROJECTILE'", "'AREA'", "'SELF'", "'INSTANT'", "'IMPULSE'", 
		"'CHASE'", "'FALL'", "'PARENT'", "'DESTROY'", "'RICOCHET'", "'MULTIPLE'", 
		null, null, "'WISE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRESOME", "FROZEN", "STORMFUL", "LIFE", "RESISTANCE", "SPEED", 
		"PROJECTILE", "AREA", "SELF", "INSTANT", "IMPULSE", "CHASE", "FALL", "PARENT", 
		"DESTROY", "RICOCHET", "MULTIPLE", "ADJECTIVE", "SIGN", "WISE", "WS", 
		"CONNECTOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SpellCreator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SpellCreatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SpellCreatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SpellCreatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SpellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShapeContext shape() {
			return GetRuleContext<ShapeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SpellCreatorParser.Eof, 0); }
		public SpellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterSpell(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitSpell(this);
		}
	}

	[RuleVersion(0)]
	public SpellContext spell() {
		SpellContext _localctx = new SpellContext(Context, State);
		EnterRule(_localctx, 0, RULE_spell);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			element();
			State = 49;
			shape();
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 50;
				Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FireContext fire() {
			return GetRuleContext<FireContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IceContext ice() {
			return GetRuleContext<IceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShockContext shock() {
			return GetRuleContext<ShockContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FIRESOME:
				{
				State = 53;
				fire();
				}
				break;
			case FROZEN:
				{
				State = 54;
				ice();
				}
				break;
			case STORMFUL:
				{
				State = 55;
				shock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 58;
			effect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FireContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRESOME() { return GetToken(SpellCreatorParser.FIRESOME, 0); }
		public FireContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fire; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterFire(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitFire(this);
		}
	}

	[RuleVersion(0)]
	public FireContext fire() {
		FireContext _localctx = new FireContext(Context, State);
		EnterRule(_localctx, 4, RULE_fire);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(FIRESOME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROZEN() { return GetToken(SpellCreatorParser.FROZEN, 0); }
		public IceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterIce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitIce(this);
		}
	}

	[RuleVersion(0)]
	public IceContext ice() {
		IceContext _localctx = new IceContext(Context, State);
		EnterRule(_localctx, 6, RULE_ice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			Match(FROZEN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORMFUL() { return GetToken(SpellCreatorParser.STORMFUL, 0); }
		public ShockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterShock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitShock(this);
		}
	}

	[RuleVersion(0)]
	public ShockContext shock() {
		ShockContext _localctx = new ShockContext(Context, State);
		EnterRule(_localctx, 8, RULE_shock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(STORMFUL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LifeContext life() {
			return GetRuleContext<LifeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResistanceContext resistance() {
			return GetRuleContext<ResistanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpeedContext speed() {
			return GetRuleContext<SpeedContext>(0);
		}
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_effect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterEffect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitEffect(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(Context, State);
		EnterRule(_localctx, 10, RULE_effect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 66;
				life();
				}
				break;
			case 2:
				{
				State = 67;
				resistance();
				}
				break;
			case 3:
				{
				State = 68;
				speed();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LifeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIFE() { return GetToken(SpellCreatorParser.LIFE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(SpellCreatorParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WISE() { return GetToken(SpellCreatorParser.WISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADJECTIVE() { return GetTokens(SpellCreatorParser.ADJECTIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE(int i) {
			return GetToken(SpellCreatorParser.ADJECTIVE, i);
		}
		public LifeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_life; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterLife(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitLife(this);
		}
	}

	[RuleVersion(0)]
	public LifeContext life() {
		LifeContext _localctx = new LifeContext(Context, State);
		EnterRule(_localctx, 12, RULE_life);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WISE) {
				{
				State = 71;
				Match(WISE);
				}
			}

			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 74;
				Match(ADJECTIVE);
				}
				break;
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 77;
				Match(ADJECTIVE);
				}
			}

			State = 80;
			Match(LIFE);
			State = 81;
			Match(SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResistanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESISTANCE() { return GetToken(SpellCreatorParser.RESISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(SpellCreatorParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WISE() { return GetToken(SpellCreatorParser.WISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADJECTIVE() { return GetTokens(SpellCreatorParser.ADJECTIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE(int i) {
			return GetToken(SpellCreatorParser.ADJECTIVE, i);
		}
		public ResistanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resistance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterResistance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitResistance(this);
		}
	}

	[RuleVersion(0)]
	public ResistanceContext resistance() {
		ResistanceContext _localctx = new ResistanceContext(Context, State);
		EnterRule(_localctx, 14, RULE_resistance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WISE) {
				{
				State = 83;
				Match(WISE);
				}
			}

			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 86;
				Match(ADJECTIVE);
				}
				break;
			}
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 89;
				Match(ADJECTIVE);
				}
			}

			State = 92;
			Match(RESISTANCE);
			State = 93;
			Match(SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpeedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPEED() { return GetToken(SpellCreatorParser.SPEED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(SpellCreatorParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WISE() { return GetToken(SpellCreatorParser.WISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADJECTIVE() { return GetTokens(SpellCreatorParser.ADJECTIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE(int i) {
			return GetToken(SpellCreatorParser.ADJECTIVE, i);
		}
		public SpeedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_speed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterSpeed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitSpeed(this);
		}
	}

	[RuleVersion(0)]
	public SpeedContext speed() {
		SpeedContext _localctx = new SpeedContext(Context, State);
		EnterRule(_localctx, 16, RULE_speed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WISE) {
				{
				State = 95;
				Match(WISE);
				}
			}

			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 98;
				Match(ADJECTIVE);
				}
				break;
			}
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 101;
				Match(ADJECTIVE);
				}
			}

			State = 104;
			Match(SPEED);
			State = 105;
			Match(SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShapeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConnectorContext connector() {
			return GetRuleContext<ConnectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProjectileContext projectile() {
			return GetRuleContext<ProjectileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AreaContext area() {
			return GetRuleContext<AreaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelfContext self() {
			return GetRuleContext<SelfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DemeanourContext demeanour() {
			return GetRuleContext<DemeanourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpactContext impact() {
			return GetRuleContext<ImpactContext>(0);
		}
		public ShapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shape; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterShape(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitShape(this);
		}
	}

	[RuleVersion(0)]
	public ShapeContext shape() {
		ShapeContext _localctx = new ShapeContext(Context, State);
		EnterRule(_localctx, 18, RULE_shape);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			connector();
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 108;
				projectile();
				}
				break;
			case 2:
				{
				State = 109;
				area();
				}
				break;
			case 3:
				{
				State = 110;
				self();
				}
				break;
			}
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 113;
				demeanour();
				}
				break;
			}
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONNECTOR) {
				{
				State = 116;
				impact();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProjectileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROJECTILE() { return GetToken(SpellCreatorParser.PROJECTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public ProjectileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_projectile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterProjectile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitProjectile(this);
		}
	}

	[RuleVersion(0)]
	public ProjectileContext projectile() {
		ProjectileContext _localctx = new ProjectileContext(Context, State);
		EnterRule(_localctx, 20, RULE_projectile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 119;
				Match(ADJECTIVE);
				}
			}

			State = 122;
			Match(PROJECTILE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AreaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREA() { return GetToken(SpellCreatorParser.AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public AreaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_area; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterArea(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitArea(this);
		}
	}

	[RuleVersion(0)]
	public AreaContext area() {
		AreaContext _localctx = new AreaContext(Context, State);
		EnterRule(_localctx, 22, RULE_area);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 124;
				Match(ADJECTIVE);
				}
			}

			State = 127;
			Match(AREA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(SpellCreatorParser.SELF, 0); }
		public SelfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_self; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterSelf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitSelf(this);
		}
	}

	[RuleVersion(0)]
	public SelfContext self() {
		SelfContext _localctx = new SelfContext(Context, State);
		EnterRule(_localctx, 24, RULE_self);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(SELF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DemeanourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConnectorContext connector() {
			return GetRuleContext<ConnectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstantContext instant() {
			return GetRuleContext<InstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImpulseContext impulse() {
			return GetRuleContext<ImpulseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChaseContext chase() {
			return GetRuleContext<ChaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FallContext fall() {
			return GetRuleContext<FallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentContext parent() {
			return GetRuleContext<ParentContext>(0);
		}
		public DemeanourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_demeanour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterDemeanour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitDemeanour(this);
		}
	}

	[RuleVersion(0)]
	public DemeanourContext demeanour() {
		DemeanourContext _localctx = new DemeanourContext(Context, State);
		EnterRule(_localctx, 26, RULE_demeanour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			connector();
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 132;
				instant();
				}
				break;
			case 2:
				{
				State = 133;
				impulse();
				}
				break;
			case 3:
				{
				State = 134;
				chase();
				}
				break;
			case 4:
				{
				State = 135;
				fall();
				}
				break;
			case 5:
				{
				State = 136;
				parent();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(SpellCreatorParser.INSTANT, 0); }
		public InstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterInstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitInstant(this);
		}
	}

	[RuleVersion(0)]
	public InstantContext instant() {
		InstantContext _localctx = new InstantContext(Context, State);
		EnterRule(_localctx, 28, RULE_instant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(INSTANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpulseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPULSE() { return GetToken(SpellCreatorParser.IMPULSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public ImpulseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impulse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterImpulse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitImpulse(this);
		}
	}

	[RuleVersion(0)]
	public ImpulseContext impulse() {
		ImpulseContext _localctx = new ImpulseContext(Context, State);
		EnterRule(_localctx, 30, RULE_impulse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 141;
				Match(ADJECTIVE);
				}
			}

			State = 144;
			Match(IMPULSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHASE() { return GetToken(SpellCreatorParser.CHASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public ChaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterChase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitChase(this);
		}
	}

	[RuleVersion(0)]
	public ChaseContext chase() {
		ChaseContext _localctx = new ChaseContext(Context, State);
		EnterRule(_localctx, 32, RULE_chase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 146;
				Match(ADJECTIVE);
				}
			}

			State = 149;
			Match(CHASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALL() { return GetToken(SpellCreatorParser.FALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public FallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterFall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitFall(this);
		}
	}

	[RuleVersion(0)]
	public FallContext fall() {
		FallContext _localctx = new FallContext(Context, State);
		EnterRule(_localctx, 34, RULE_fall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 151;
				Match(ADJECTIVE);
				}
			}

			State = 154;
			Match(FALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARENT() { return GetToken(SpellCreatorParser.PARENT, 0); }
		public ParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterParent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitParent(this);
		}
	}

	[RuleVersion(0)]
	public ParentContext parent() {
		ParentContext _localctx = new ParentContext(Context, State);
		EnterRule(_localctx, 36, RULE_parent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(PARENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConnectorContext connector() {
			return GetRuleContext<ConnectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestroyContext destroy() {
			return GetRuleContext<DestroyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RicochetContext ricochet() {
			return GetRuleContext<RicochetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleContext multiple() {
			return GetRuleContext<MultipleContext>(0);
		}
		public ImpactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterImpact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitImpact(this);
		}
	}

	[RuleVersion(0)]
	public ImpactContext impact() {
		ImpactContext _localctx = new ImpactContext(Context, State);
		EnterRule(_localctx, 38, RULE_impact);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			connector();
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 159;
				destroy();
				}
				break;
			case 2:
				{
				State = 160;
				ricochet();
				}
				break;
			case 3:
				{
				State = 161;
				multiple();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestroyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESTROY() { return GetToken(SpellCreatorParser.DESTROY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public DestroyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destroy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterDestroy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitDestroy(this);
		}
	}

	[RuleVersion(0)]
	public DestroyContext destroy() {
		DestroyContext _localctx = new DestroyContext(Context, State);
		EnterRule(_localctx, 40, RULE_destroy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 164;
				Match(ADJECTIVE);
				}
			}

			State = 167;
			Match(DESTROY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RicochetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RICOCHET() { return GetToken(SpellCreatorParser.RICOCHET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public RicochetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ricochet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterRicochet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitRicochet(this);
		}
	}

	[RuleVersion(0)]
	public RicochetContext ricochet() {
		RicochetContext _localctx = new RicochetContext(Context, State);
		EnterRule(_localctx, 42, RULE_ricochet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 169;
				Match(ADJECTIVE);
				}
			}

			State = 172;
			Match(RICOCHET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLE() { return GetToken(SpellCreatorParser.MULTIPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADJECTIVE() { return GetToken(SpellCreatorParser.ADJECTIVE, 0); }
		public MultipleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterMultiple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitMultiple(this);
		}
	}

	[RuleVersion(0)]
	public MultipleContext multiple() {
		MultipleContext _localctx = new MultipleContext(Context, State);
		EnterRule(_localctx, 44, RULE_multiple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ADJECTIVE) {
				{
				State = 174;
				Match(ADJECTIVE);
				}
			}

			State = 177;
			Match(MULTIPLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTOR() { return GetToken(SpellCreatorParser.CONNECTOR, 0); }
		public ConnectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.EnterConnector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISpellCreatorListener typedListener = listener as ISpellCreatorListener;
			if (typedListener != null) typedListener.ExitConnector(this);
		}
	}

	[RuleVersion(0)]
	public ConnectorContext connector() {
		ConnectorContext _localctx = new ConnectorContext(Context, State);
		EnterRule(_localctx, 46, RULE_connector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(CONNECTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', '\xB8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x36', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', ';', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'H', 
		'\n', '\a', '\x3', '\b', '\x5', '\b', 'K', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', 'N', '\n', '\b', '\x3', '\b', '\x5', '\b', 'Q', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', '\t', 'W', '\n', '\t', 
		'\x3', '\t', '\x5', '\t', 'Z', '\n', '\t', '\x3', '\t', '\x5', '\t', ']', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x5', 
		'\n', '\x63', '\n', '\n', '\x3', '\n', '\x5', '\n', '\x66', '\n', '\n', 
		'\x3', '\n', '\x5', '\n', 'i', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'r', '\n', '\v', '\x3', '\v', '\x5', '\v', 'u', '\n', '\v', '\x3', '\v', 
		'\x5', '\v', 'x', '\n', '\v', '\x3', '\f', '\x5', '\f', '{', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x5', '\r', '\x80', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x8C', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x5', '\x11', '\x91', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x5', '\x12', '\x96', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x5', '\x13', '\x9B', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\xA5', '\n', '\x15', '\x3', '\x16', 
		'\x5', '\x16', '\xA8', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x17', '\x5', '\x17', '\xAD', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x5', '\x18', '\xB2', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x2', '\x2', '\x1A', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x2', '\x2', '\x2', '\xBF', '\x2', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x4', ':', '\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', 
		'\x2', '\x2', '\x2', '\b', '@', '\x3', '\x2', '\x2', '\x2', '\n', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'G', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x10', 'V', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x62', '\x3', '\x2', '\x2', '\x2', '\x14', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'z', '\x3', '\x2', '\x2', '\x2', '\x18', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x85', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x90', '\x3', '\x2', '\x2', '\x2', '\"', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x9A', '\x3', '\x2', '\x2', '\x2', '&', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xA0', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', ',', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x30', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\x4', '\x3', '\x2', '\x33', 
		'\x35', '\x5', '\x14', '\v', '\x2', '\x34', '\x36', '\a', '\x2', '\x2', 
		'\x3', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x3', '\x3', '\x2', '\x2', '\x2', '\x37', 
		';', '\x5', '\x6', '\x4', '\x2', '\x38', ';', '\x5', '\b', '\x5', '\x2', 
		'\x39', ';', '\x5', '\n', '\x6', '\x2', ':', '\x37', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x5', '\f', 
		'\a', '\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x3', 
		'\x2', '\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', 
		'\x4', '\x2', '\x2', '\x41', '\t', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\a', '\x5', '\x2', '\x2', '\x43', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'H', '\x5', '\xE', '\b', '\x2', '\x45', 'H', '\x5', '\x10', 
		'\t', '\x2', '\x46', 'H', '\x5', '\x12', '\n', '\x2', 'G', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\r', '\x3', '\x2', '\x2', '\x2', 'I', 
		'K', '\a', '\x16', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\a', '\x14', '\x2', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\a', '\x14', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\a', '\x6', '\x2', '\x2', 'S', 'T', '\a', '\x15', '\x2', '\x2', 
		'T', '\xF', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\a', '\x16', '\x2', 
		'\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\a', '\x14', '\x2', 
		'\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '\\', '\x3', '\x2', '\x2', '\x2', '[', ']', '\a', '\x14', 
		'\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '_', '\a', 
		'\a', '\x2', '\x2', '_', '`', '\a', '\x15', '\x2', '\x2', '`', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\a', '\x16', '\x2', '\x2', 
		'\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', 
		'\a', '\x14', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'i', '\a', '\x14', '\x2', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\a', '\b', '\x2', '\x2', 'k', 'l', '\a', '\x15', 
		'\x2', '\x2', 'l', '\x13', '\x3', '\x2', '\x2', '\x2', 'm', 'q', '\x5', 
		'\x30', '\x19', '\x2', 'n', 'r', '\x5', '\x16', '\f', '\x2', 'o', 'r', 
		'\x5', '\x18', '\r', '\x2', 'p', 'r', '\x5', '\x1A', '\xE', '\x2', 'q', 
		'n', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 
		's', 'u', '\x5', '\x1C', '\xF', '\x2', 't', 's', '\x3', '\x2', '\x2', 
		'\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'x', '\x5', '(', '\x15', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'y', '{', '\a', '\x14', '\x2', '\x2', 'z', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', 
		'\x2', '\x2', '|', '}', '\a', '\t', '\x2', '\x2', '}', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x80', '\a', '\x14', '\x2', '\x2', '\x7F', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', 
		'\n', '\x2', '\x2', '\x82', '\x19', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\a', '\v', '\x2', '\x2', '\x84', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x8B', '\x5', '\x30', '\x19', '\x2', '\x86', '\x8C', '\x5', 
		'\x1E', '\x10', '\x2', '\x87', '\x8C', '\x5', ' ', '\x11', '\x2', '\x88', 
		'\x8C', '\x5', '\"', '\x12', '\x2', '\x89', '\x8C', '\x5', '$', '\x13', 
		'\x2', '\x8A', '\x8C', '\x5', '&', '\x14', '\x2', '\x8B', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\f', '\x2', '\x2', '\x8E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x91', '\a', '\x14', '\x2', 
		'\x2', '\x90', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\r', '\x2', '\x2', '\x93', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x96', '\a', '\x14', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\xE', '\x2', '\x2', 
		'\x98', '#', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9B', '\a', '\x14', 
		'\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\a', '\xF', '\x2', '\x2', '\x9D', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x9F', '\a', '\x10', '\x2', '\x2', '\x9F', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA4', '\x5', '\x30', '\x19', '\x2', 
		'\xA1', '\xA5', '\x5', '*', '\x16', '\x2', '\xA2', '\xA5', '\x5', ',', 
		'\x17', '\x2', '\xA3', '\xA5', '\x5', '.', '\x18', '\x2', '\xA4', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA8', '\a', '\x14', '\x2', '\x2', '\xA7', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x11', 
		'\x2', '\x2', '\xAA', '+', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAD', 
		'\a', '\x14', '\x2', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\a', '\x12', '\x2', '\x2', '\xAF', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\a', '\x14', '\x2', '\x2', 
		'\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', 
		'\a', '\x13', '\x2', '\x2', '\xB4', '/', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\x18', '\x2', '\x2', '\xB6', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x35', ':', 'G', 'J', 'M', 'P', 'V', 'Y', '\\', '\x62', 
		'\x65', 'h', 'q', 't', 'w', 'z', '\x7F', '\x8B', '\x90', '\x95', '\x9A', 
		'\xA4', '\xA7', '\xAC', '\xB1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
